package it.polito.wa2.server

import it.polito.wa2.server.ticketing.employees.*
import it.polito.wa2.server.ticketing.employees.toDTO
import it.polito.wa2.server.ticketing.tickets.toDTO
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.web.client.TestRestTemplate
import org.springframework.core.ParameterizedTypeReference
import org.springframework.http.HttpEntity
import org.springframework.http.HttpMethod
import org.springframework.http.HttpStatus
import org.springframework.test.context.DynamicPropertyRegistry
import org.springframework.test.context.DynamicPropertySource
import org.testcontainers.containers.PostgreSQLContainer
import org.testcontainers.junit.jupiter.Container
import org.testcontainers.junit.jupiter.Testcontainers

@Testcontainers
@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureTestDatabase(replace=AutoConfigureTestDatabase.Replace.NONE)
class ExpertsTests {
    companion object {
        @Container
        val postgres = PostgreSQLContainer("postgres:latest")

        @JvmStatic
        @DynamicPropertySource
        fun properties(registry: DynamicPropertyRegistry) {
            registry.add("spring.datasource.url", postgres::getJdbcUrl)
            registry.add("spring.datasource.username", postgres::getUsername)
            registry.add("spring.datasource.password", postgres::getPassword)
            registry.add("spring.jpa.hibernate.ddl-auto") {"create-drop"}
        }

        inline fun <reified T> typeReference() = object: ParameterizedTypeReference<T>() {}
        private lateinit var expert1: Expert
        private lateinit var expert2: Expert
    }

    @Autowired
    lateinit var restTemplate: TestRestTemplate
    @Autowired
    lateinit var expertRepository: ExpertRepository

    @BeforeEach
    fun populateDb() {
        // recreate the objects before each test to reinitialize the ids
        expert1 = Expert("John", "Smith")
        expert2 = Expert("Jack", "Smith")
        expertRepository.save(expert1)
    }

    @AfterEach
    fun emptyDb() {
        expertRepository.deleteAll()
    }

    @Test
    fun getExpert() {
        val res = restTemplate.exchange("/API/experts/${expert1.id}", HttpMethod.GET, null, typeReference<ExpertDTO>())

        Assertions.assertEquals(HttpStatus.OK, res.statusCode)
        Assertions.assertEquals(expert1.toDTO(), res.body)
    }

    @Test
    fun expertNotFound() {
        // using expert2.id, which is 0 as it has not been saved
        val res = restTemplate.exchange("/API/experts/${expert2.id}", HttpMethod.GET, null, typeReference<Unit>())

        Assertions.assertEquals(HttpStatus.NOT_FOUND, res.statusCode)
    }

    @Test
    fun createExpert() {
        val requestEntity = HttpEntity(expert2.toNewDTO())
        val res = restTemplate.exchange("/API/experts", HttpMethod.POST, requestEntity, typeReference<ExpertDTO>())

        // expert2 with newly autogenerated id
        val createdExpert = expert2.apply { id = res.body!!.id }.toDTO()

        Assertions.assertEquals(HttpStatus.OK, res.statusCode)
        Assertions.assertEquals(createdExpert, res.body)

        val res2 = restTemplate.exchange("/API/experts/${createdExpert.id}", HttpMethod.GET, null, typeReference<ExpertDTO>())
        Assertions.assertEquals(HttpStatus.OK, res.statusCode)
        Assertions.assertEquals(createdExpert, res2.body)
    }

    @Test
    fun creatingAlreadyExistingExpertShouldNotFail() {
        val requestEntity = HttpEntity(expert1.toNewDTO())
        val res = restTemplate.exchange("/API/experts", HttpMethod.POST, requestEntity, typeReference<ExpertDTO>())

        // textExpert2 with newly autogenerated id
        val createdExpert = expert1.apply { id = res.body!!.id }.toDTO()

        Assertions.assertEquals(HttpStatus.OK, res.statusCode)
        Assertions.assertEquals(createdExpert, res.body)

        val res2 = restTemplate.exchange("/API/experts/${createdExpert.id}", HttpMethod.GET, null, typeReference<ExpertDTO>())
        Assertions.assertEquals(HttpStatus.OK, res.statusCode)
        Assertions.assertEquals(createdExpert, res2.body)
    }

    @Test
    fun editExpert() {
        // edit testExpert1 with testExpert2 fields
        val editedExpert = ExpertDTO(expert1.id, expert2.firstName, expert2.lastName, expert2.tickets.map { it.toDTO() })
        val requestEntity = HttpEntity(editedExpert)
        val res = restTemplate.exchange("/API/experts", HttpMethod.PUT, requestEntity, typeReference<Unit>())

        Assertions.assertEquals(HttpStatus.OK, res.statusCode)

        val res2 = restTemplate.exchange("/API/experts/${editedExpert.id}", HttpMethod.GET, null, typeReference<ExpertDTO>())
        Assertions.assertEquals(HttpStatus.OK, res.statusCode)
        Assertions.assertEquals(editedExpert, res2.body)
    }
}